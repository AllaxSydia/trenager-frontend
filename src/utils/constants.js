export const LANGUAGES = [
  { id: 'python', name: 'Python', icon: 'üêç' },
  { id: 'javascript', name: 'JavaScript', icon: 'üìú' },
  { id: 'cpp', name: 'C++', icon: '‚ö°' },
  { id: 'java', name: 'Java', icon: '‚òï' }
]

export const DIFFICULTY_LEVELS = {
  beginner: { name: '–ù–∞—á–∞–ª—å–Ω—ã–π', color: '#28a745', icon: 'üü¢' },
  intermediate: { name: '–°—Ä–µ–¥–Ω–∏–π', color: '#fd7e14', icon: 'üü†' },
  advanced: { name: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π', color: '#dc3545', icon: 'üî¥' }
}

export const TOPICS = {
  output: { name: '–í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö', order: 1 },
  input: { name: '–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö', order: 2 },
  conditions: { name: '–£—Å–ª–æ–≤–∏—è', order: 3 },
  loops: { name: '–¶–∏–∫–ª—ã', order: 4 },
  arrays: { name: '–ú–∞—Å—Å–∏–≤—ã', order: 5 },
  functions: { name: '–§—É–Ω–∫—Ü–∏–∏', order: 6 },
  oop: { name: '–û–û–ü', order: 7 },
  algorithms: { name: '–ê–ª–≥–æ—Ä–∏—Ç–º—ã', order: 8 }
}

export const TASK_DATA = {
  python: {
    output: [
            {
        id: 1,
        title: "Hello World",
        description: "–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç 'Hello World' –≤ –∫–æ–Ω—Å–æ–ª—å.",
        difficulty: "beginner",
        defaultCode: '# –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å\nprint("Hello World")',
        testPattern: /print\s*\(\s*["']Hello World["']\s*\)\s*$/m, // –¢–æ–ª—å–∫–æ Hello World
        solution: 'print("Hello World")'
      },
      {
        id: 2,
        title: "–í—ã–≤–æ–¥ —á–∏—Å–µ–ª",
        description: "–í—ã–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 5, –∫–∞–∂–¥–æ–µ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ.",
        difficulty: "beginner", 
        defaultCode: '# –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å\nprint(1)\nprint(2)\nprint(3)\nprint(4)\nprint(5)',
        testPattern: /print\s*\(\s*1\s*\)[\s\S]*print\s*\(\s*2\s*\)[\s\S]*print\s*\(\s*3\s*\)[\s\S]*print\s*\(\s*4\s*\)[\s\S]*print\s*\(\s*5\s*\)/,
        solution: 'for i in range(1, 6):\n    print(i)'
      }
    ],
    input: [
      {
        id: 3,
        title: "–°—É–º–º–∞ –¥–≤—É—Ö —á–∏—Å–µ–ª",
        description: "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –¥–≤–∞ —á–∏—Å–ª–∞ –∏ –≤—ã–≤–æ–¥–∏—Ç—å –∏—Ö —Å—É–º–º—É.",
        difficulty: "beginner",
        defaultCode: '# –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å\na = int(input())\nb = int(input())',
        testPattern: /input\s*\(\s*\)[\s\S]*\+\s*/,
        solution: 'a = int(input())\nb = int(input())\nprint(a + b)'
      }
    ],
    conditions: [
      {
        id: 4, 
        title: "–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ç–Ω–æ—Å—Ç–∏",
        description: "–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ —á–µ—Ç–Ω—ã–º.",
        difficulty: "beginner",
        defaultCode: '# –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å\nnum = int(input())',
        testPattern: /if\s+.*%\s*2\s*==\s*0/,
        solution: 'num = int(input())\nif num % 2 == 0:\n    print("–ß–µ—Ç–Ω–æ–µ")\nelse:\n    print("–ù–µ—á–µ—Ç–Ω–æ–µ")'
      }
    ],
    loops: [
      {
        id: 5,
        title: "–¢–∞–±–ª–∏—Ü–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è",
        description: "–í—ã–≤–µ–¥–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É —É–º–Ω–æ–∂–µ–Ω–∏—è –¥–ª—è —á–∏—Å–ª–∞ 5 (–æ—Ç 1 –¥–æ 10).",
        difficulty: "intermediate", 
        defaultCode: '# –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å',
        testPattern: /for\s+.*in\s+range.*print.*\*/,
        solution: 'for i in range(1, 11):\n    print(f"5 * {i} = {5 * i}")'
      }
    ]
  },
  javascript: {
    output: [
      {
        id: 1,
        title: "Hello World", 
        description: "–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç 'Hello World' –≤ –∫–æ–Ω—Å–æ–ª—å.",
        difficulty: "beginner",
        defaultCode: '// –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å\nconsole.log("Hello World")',
        testPattern: /console\.log\s*\(\s*["']Hello World["']\s*\)/,
        solution: 'console.log("Hello World")'
      }
    ],
    input: [
      {
        id: 2,
        title: "–°—É–º–º–∞ –¥–≤—É—Ö —á–∏—Å–µ–ª",
        description: "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –¥–≤–∞ —á–∏—Å–ª–∞ –∏ –≤—ã–≤–æ–¥–∏—Ç—å –∏—Ö —Å—É–º–º—É.",
        difficulty: "beginner",
        defaultCode: '// –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å\nconst a = parseInt(prompt());\nconst b = parseInt(prompt());',
        testPattern: /prompt\s*\(\s*\)[\s\S]*\+\s*/,
        solution: 'const a = parseInt(prompt());\nconst b = parseInt(prompt());\nconsole.log(a + b);'
      }
    ]
  },
  cpp: {
    output: [
      {
        id: 1,
        title: "Hello World",
        description: "–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç 'Hello World' –≤ –∫–æ–Ω—Å–æ–ª—å.",
        difficulty: "beginner",
        defaultCode: '// –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å\n#include <iostream>\n\nint main() {\n    std::cout << "Hello World" << std::endl;\n    return 0;\n}',
        testPattern: /cout\s*<<\s*["']Hello World["']/,
        solution: '#include <iostream>\n\nint main() {\n    std::cout << "Hello World" << std::endl;\n    return 0;\n}'
      }
    ]
  },
  java: {
    output: [
      {
        id: 1,
        title: "Hello World",
        description: "–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç 'Hello World' –≤ –∫–æ–Ω—Å–æ–ª—å.", 
        difficulty: "beginner",
        defaultCode: '// –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println("Hello World");\n    }\n}',
        testPattern: /System\.out\.println\s*\(\s*["']Hello World["']\s*\)/,
        solution: 'public class Main {\n    public static void main(String[] args) {\n        System.out.println("Hello World");\n    }\n}'
      }
    ]
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏
export const getTasksByLanguage = (language) => {
  return TASK_DATA[language] || {}
}

export const getTask = (language, topic, taskId) => {
  const tasks = TASK_DATA[language]?.[topic] || []
  return tasks.find(task => task.id === parseInt(taskId))
}

export const getAllTopics = () => {
  return Object.entries(TOPICS).sort((a, b) => a[1].order - b[1].order)
}