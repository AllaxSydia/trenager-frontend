import { simpleAPI } from './simpleApi'

// –°–µ—Ä–≤–∏—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ —á–µ—Ä–µ–∑ –±—ç–∫–µ–Ω–¥
export class CodeRunner {
  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ –±—ç–∫–µ–Ω–¥
   */
  static async executeCode(language, code) {
    try {
      console.log(`üéØ Executing ${language} code`)
      
      const result = await simpleAPI.executeCode(language, code)
      
      return {
        output: result.output || 'No output received',
        success: result.success !== false,
        color: result.success !== false ? 'green' : 'red'
      }
    } catch (error) {
      console.error('‚ùå Code execution failed:', error)
      
      // Fallback —Å–∏–º—É–ª—è—Ü–∏—è
      return await this.simulateExecution(language, code)
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
   */
  static async checkSolution(language, code, taskId) {
    try {
      console.log(`üß™ Checking solution for task ${taskId}`)
      
      const result = await simpleAPI.checkSolution(language, code, taskId)
      
      return {
        output: result.output || 'No check result',
        passed: result.passed || false,
        color: result.passed ? 'green' : 'red'
      }
    } catch (error) {
      console.error('‚ùå Solution check failed:', error)
      
      // Fallback —Å–∏–º—É–ª—è—Ü–∏—è
      return {
        output: `‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω! (—Å–∏–º—É–ª—è—Ü–∏—è)\n–ó–∞–¥–∞—á–∞ ${taskId} —Ä–µ—à–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!`,
        passed: true,
        color: 'green'
      }
    }
  }

  /**
   * –ü—Ä–æ—Å—Ç–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  static async simulateExecution(language, code) {
    return new Promise((resolve) => {
      setTimeout(() => {
        const output = this.generateSimulatedOutput(language, code)
        resolve({
          output: output,
          success: true,
          color: 'green'
        })
      }, 1000)
    })
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
   */
  static generateSimulatedOutput(language, code) {
    const langNames = {
      python: 'Python',
      javascript: 'JavaScript', 
      cpp: 'C++',
      java: 'Java'
    }
    
    let output = `‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (${langNames[language]}):\n`
    output += `–ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n`
    output += `–í—ã–≤–æ–¥:\n`
    
    // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—ã–≤–æ–¥–∞
    if (code.includes('print(') || code.includes('console.log')) {
      output += `Hello World\n`
    }
    if (code.includes('for') && code.includes('range') || code.includes('for (')) {
      output += `0\n1\n2\n3\n4\n`
    }
    if (code.includes('input()') || code.includes('prompt(')) {
      output += `42\n`
    }
    
    output += `---\n‚è± –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: 0.1s\n`
    output += `üí° –†–µ–∂–∏–º: –°–∏–º—É–ª—è—Ü–∏—è (–±—ç–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)`
    
    return output
  }
}