import { simpleAPI } from './simpleApi'

// –°–µ—Ä–≤–∏—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞
export class CodeRunner {
  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞
   */
  static async executeCode(language, code) {
    try {
      console.log(`üéØ Executing ${language} code`)
      
      const result = await simpleAPI.executeCode(language, code)
      
      return {
        output: result.output || 'No output received',
        success: result.success !== false,
        color: result.success !== false ? 'green' : 'red'
      }
    } catch (error) {
      console.error('‚ùå Code execution failed:', error)
      
      // –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
      return await this.localExecuteCode(language, code)
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
   */
  static async checkSolution(language, code, taskId) {
    try {
      console.log(`üß™ Checking solution for task ${taskId}`)
      
      const result = await simpleAPI.checkSolution(language, code, taskId)
      
      return {
        output: result.output || 'No check result',
        passed: result.passed || false,
        color: result.passed ? 'green' : 'red'
      }
    } catch (error) {
      console.error('‚ùå Solution check failed:', error)
      
      // –õ–æ–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
      return this.localSolutionCheck(language, code, taskId)
    }
  }

  /**
   * –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞
   */
  static async localExecuteCode(language, code) {
    return new Promise((resolve) => {
      setTimeout(() => {
        try {
          const output = this.executeInBrowser(language, code)
          resolve({
            output: output,
            success: true,
            color: 'green'
          })
        } catch (error) {
          resolve({
            output: `‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${error.message}`,
            success: false,
            color: 'red'
          })
        }
      }, 500)
    })
  }

  /**
   * –õ–æ–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—à–µ–Ω–∏—è
   */
  static localSolutionCheck(language, code, taskId) {
    console.log(`üîç Local check for task ${taskId}`)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
    const syntaxValid = this.checkSyntax(language, code)
    if (!syntaxValid.valid) {
      return {
        output: `‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:\n${syntaxValid.error}`,
        passed: false,
        color: 'red'
      }
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞
    const output = this.executeInBrowser(language, code)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á—É
    const taskCheck = this.checkTaskRequirements(language, code, taskId, output)
    
    return {
      output: taskCheck.passed 
        ? `‚úÖ –ó–∞–¥–∞—á–∞ —Ä–µ—à–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n–í—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã:\n${output}`
        : `‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞:\n${taskCheck.message}\n\n–í—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã:\n${output}`,
      passed: taskCheck.passed,
      color: taskCheck.passed ? 'green' : 'red'
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
   */
  static checkSyntax(language, code) {
    const checks = {
      python: () => {
        const openParens = (code.match(/\(/g) || []).length
        const closeParens = (code.match(/\)/g) || []).length
        
        if (openParens !== closeParens) {
          return { valid: false, error: '–ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—Ä—É–≥–ª—ã–µ —Å–∫–æ–±–∫–∏' }
        }
        return { valid: true }
      },
      javascript: () => {
        const openBraces = (code.match(/{/g) || []).length
        const closeBraces = (code.match(/}/g) || []).length
        const openParens = (code.match(/\(/g) || []).length
        const closeParens = (code.match(/\)/g) || []).length
        
        if (openBraces !== closeBraces) {
          return { valid: false, error: '–ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏' }
        }
        if (openParens !== closeParens) {
          return { valid: false, error: '–ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—Ä—É–≥–ª—ã–µ —Å–∫–æ–±–∫–∏' }
        }
        return { valid: true }
      },
      cpp: () => {
        if (!code.includes('int main()')) {
          return { valid: false, error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è main()' }
        }
        return { valid: true }
      },
      java: () => {
        if (!code.includes('public class Main')) {
          return { valid: false, error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª–∞—Å—Å Main' }
        }
        return { valid: true }
      }
    }
    
    return checks[language] ? checks[language]() : { valid: true }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
   */
  static executeInBrowser(language, code) {
    const executors = {
      javascript: () => this.executeJavaScript(code),
      python: () => this.executePython(code),
      cpp: () => '‚ùå C++ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç –±—ç–∫–µ–Ω–¥',
      java: () => '‚ùå Java –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç –±—ç–∫–µ–Ω–¥'
    }
    
    return executors[language] ? executors[language]() : '‚ùå –Ø–∑—ã–∫ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'
  }

  static executeJavaScript(code) {
    try {
      let output = ''
      const originalConsoleLog = console.log
      
      console.log = (...args) => {
        output += args.join(' ') + '\n'
      }
      
      eval(code)
      
      console.log = originalConsoleLog
      
      return output || '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (—Ä–µ–∞–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ JS)'
    } catch (error) {
      return `‚ùå –û—à–∏–±–∫–∞ JavaScript: ${error.message}`
    }
  }

  static executePython(code) {
    try {
      let output = ''
      const lines = code.split('\n')
      
      for (let i = 0; i < lines.length; i++) {
        const line = lines[i].trim()
        
        // –≠–º—É–ª—è—Ü–∏—è print
        if (line.startsWith('print(') && line.endsWith(')')) {
          const content = line.slice(6, -1).trim()
          const printed = content.replace(/^['"](.*)['"]$/, '$1')
          output += printed + '\n'
        }
        
        // –≠–º—É–ª—è—Ü–∏—è —Ü–∏–∫–ª–æ–≤ for
        if (line.includes('for') && line.includes('in range(')) {
          const rangeMatch = line.match(/for\s+(\w+)\s+in\s+range\(([^)]+)\)/)
          if (rangeMatch) {
            const [_, varName, rangeArgs] = rangeMatch
            const args = rangeArgs.split(',').map(arg => parseInt(arg.trim()))
            
            let start = 0, end = 0
            if (args.length === 1) {
              end = args[0]
            } else if (args.length === 2) {
              start = args[0]
              end = args[1]
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É —Å –æ—Ç—Å—Ç—É–ø–æ–º
            if (i + 1 < lines.length && (lines[i + 1].startsWith(' ') || lines[i + 1].startsWith('\t'))) {
              const loopLine = lines[i + 1].trim()
              if (loopLine.includes('print(')) {
                for (let j = start; j < end; j++) {
                  const loopContent = loopLine.slice(6, -1).trim()
                  let printed = loopContent.replace(new RegExp(varName, 'g'), j)
                    .replace(/^['"](.*)['"]$/, '$1')
                  
                  // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
                  if (printed.includes('*')) {
                    const parts = printed.split('*').map(p => p.trim())
                    if (parts.length === 2 && !isNaN(parts[0]) && !isNaN(parts[1])) {
                      printed = (parseInt(parts[0]) * parseInt(parts[1])).toString()
                    }
                  }
                  
                  output += printed + '\n'
                }
                i++ // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É —Ü–∏–∫–ª–∞
              }
            }
          }
        }
      }
      
      return output || '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (—ç–º—É–ª—è—Ü–∏—è Python)'
    } catch (error) {
      return `‚ùå –û—à–∏–±–∫–∞ Python: ${error.message}`
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∑–∞–¥–∞—á–∏
   */
  static checkTaskRequirements(language, code, taskId, output) {
    const validators = {
      1: () => ({
        passed: output.includes('Hello World'),
        message: '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–æ–¥–∏—Ç—å "Hello World"'
      }),
      2: () => ({
        passed: output.includes('5') && output.includes('10') && output.includes('15'),
        message: '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–æ–¥–∏—Ç—å —á–∏—Å–ª–∞ 5, 10, 15...'
      })
    }
    
    const validator = validators[taskId] || (() => ({ 
      passed: true, 
      message: '' 
    }))
    
    return validator()
  }
}